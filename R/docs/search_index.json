[
["welcome.html", "Test 1 Welcome 1.1 Syllabus 1.2 Agenda 1.3 Download and Install R 1.4 Download and Install RStudio 1.5 Download workshop data", " Test James Simkins 2020-08-24 1 Welcome Phase 1: Environmental Computing with R - 9/1/2020 to 10/1/2019 – 1cr Phase 2: Spatial Computing with Python – 10/2/2020 to 12/10/2020 – 2cr The objective of GEOG 473/673 Open-sourced Environmental Computing is for advanced undergraduate and graduate students to gain practical experience with R &amp; Python, two industry-leading open-sourced programming languages. Both of these languages are used to assemble, read, and manage large geospatial and environmental datasets by academics, government scientists, and private industry. Each of these programming languages offer a plethora of free packages that allow a user to work with big spatial data in an analytical manner without paying a dime. The demand for students knowledgeable in R &amp; Python is continuing to grow. It’s important to note that this is an Introduction to R (or Python), NOT an introduction to programming. This challenging, fast-paced course is intended for students that already have at least basic programming experience. 1.1 Syllabus https://github.com/jsimkins2/geog473-673/blob/master/documents/fall_geog473_673_syllabus.pdf 1.2 Agenda This course is split into 2 phases - R and Python. For the R phase, this will be our scheudle. |Week | Focus| + |1 | An Introduction to R| |2 | R Syntax, Classes &amp; Datatypes| |3 | Time Series Analysis with DEOS data| |4 | Raster Analysis with Oceanography data| | |5 | Resampling and Reprojecting Rasters with climatological temperature data| | Before the training, please do the following (10 minutes). All software is free and trusted. 1.3 Download and Install R Navigate to the R website: https://cloud.r-project.org/ Click Download for your Operating System (Windows, Mac OSx, or Linux - if you don’t have a MacBook, then you’re using Windows most likely) Click the most recent R version to download. Install the downloaded application as you would with any other application on your computer. 1.4 Download and Install RStudio Navigate to the RStudio Website: http://www.rstudio.com/download Click Download under RStudio Desktop Free This website detects your operating system, allowing you to just click download again. Note that if it doesn’t automatically detect just select the download next to your operating system below this Note that you may be asked to install command line developer tools if you’re using a Mac - select Yes. Install the downloaded application as you normally would on your computer. 1.5 Download workshop data Navigate to the database - https://github.com/jsimkins2/geog473-673/tree/master/datasets Click on Code - then click download as zip "],
["overview.html", "2 Overview 2.1 What is R? 2.2 Reasons to love R 2.3 Guiding Principles", " 2 Overview 2.1 What is R? R is an open-source (aka free) programming language. It was initially created for statistical operations in the 1990s but has since expanded greatly and can now be used to accomplish almost any data related task. Using R involves writing a script. A script is just an R document that performs some sort of analysis / operation / image creation. Writing code and generating an R script is done completely via typing as opposed to pointing and clicking. In this workshop we’ll learn how to write an R script and use it to perform data analysis. 2.2 Reasons to love R Attribute Reason Speed Spreadsheets that take 1 hour of computer calculation time in Excel take less than a second in R Capacity Excel can handle thousands of records, R can handle millions Risk Reduction Excel requires process notes, manual steps, copy/paste values, fill down, etc. After writing a single R script, R is auditable and reproducible within milliseconds - without any alterations to your original data. For example, if you are working with a dataset that multiple people are using, you can load this dataset in R and perform the tasks that you need without making any changes to the original dataset. Visualizations R is capable to create high quality visualizations and also has the capacity to create interactive visualizations that can easiliy be shared. Plots or images can easily be exported to PNG, JPEG, or even web-based interactive dashboards that can be hosted on a webpage Collaboration R script sharing is much safer than in Excel. As mentioned above, a team using the same data input file but performing different tasks on it can do so without editing the data input file for everyone else. Data output can also be shared without the concern of a colleague editing the file output. RStudio connect or Github are also popular free track all changes that take place between R script files. Price R is completely free! Yes…every bit of it! 2.3 Guiding Principles Comment, comment, comment. A comment is a brief note on what you were doing when you wrote a line of code. For example, if you write some R code that edits part of a dataframe (R’s version of an Excel Spreadsheet), comment what you were thinking here and why you did it this way. Once you become comfortable coding in R, you’ll be able to churn out new R scripts at a faster rate. It’s very important that you comment on what you’re doing at each step in the script so if you need to look back on something you wrote you can reference what you were doing there. A comment in R is declared using the pound symbol (#). Keep raw data raw. An advantage of R is being able to read in an original spreadsheet and output a new spreadsheet as a separate file. In other words, when you read in a dataset (for example, tv_shows.csv) and make changes to this file, do not save it was tv_shows.csv - thus overwriting the file. Instead, name it something like tv_shows_edited.csv. Also, notice how we use underscores (_) in between words of a filename - this is good practice that should be replicated (spaces are bad, see 4) When in doubt, Google your R question - look for StackOverflow links. StackOverflow is a web-forum where programmers can post questions for help. This is an incredible tool that even advanced programmers and developers use daily. There are other helpful forums out there - StackOverflow is the most popular. Spaces in variable/file names are BAD. A variable is an object or column that you create in R. For example, if you have a list of student names (student_names = list(&quot;John&quot;, &quot;Peter&quot;, &quot;Sebastian&quot;), the variable here would be student_names. Let’s get into the habit of using underscores ’_’ or dashes ‘-’ or periods ‘.’ to separate words instead of spaces. From the computers side of variable name storage, it’s much safe to declare a variable name such as data_file as opposed to data file Keep in mind, these will make more sense after we get more familiar with R - it’s alright if they’re confusing right now! "],
["r-rstudio.html", "3 R &amp; RStudio 3.1 Open RStudio 3.2 R Studio Layout 3.3 Installing and Using Packages 3.4 Loading the installed packages into R 3.5 Running Code 3.6 Checkpoint - Writing your first R code 3.7 Explanation - Writing your first R code 3.8 How does an R script generally flow? 3.9 Now Let’s Break Down This Script 3.10 In Class Exercise 3.11 DataTypes 3.12 Essential Skills: The For Loop 3.13 DEOS Data", " 3 R &amp; RStudio By now you’ve downloaded R and RStudio and you’re probably wondering, why do I need to download both? R is that programming language that is running on your computer. RStudio is what we call an Indegrated Development Environment (IDE) - this is a technical term for a pretty application that’s all dressed up on the surface but underneath is really crunching some numbers (using R) at serious speeds. RStudio is the application we’ll be using. It is our Microsoft Excel. RStudio runs R in the background for us and gives us information and a nice, user-friendly layout. Let’s open RStudio and get familiar with it. 3.1 Open RStudio Navigate to your applications folder on your computer. Launch RStudio. When you open it for the first time, you should see this. This is RStudio. When you open it for the first time, we’ll need to open a new RScript to begin coding. Open new R Script To open a new R Script, we select the blankpage with green plus icon and select R Script from the menu. This opens up the new R script and we can begin coding in R. Now that we have the R Script open, you’ll notice 4 quadrants. Let’s run through what those quadrants are. 3.2 R Studio Layout Now let’s describe what’s going on here in a little more detail. R Script - This is your canvas. This is where we write and edit our code. A lot of trial and error goes on here. R Console - This is where you run your code. When we talk about running code, we mean we’re telling R to execute the code we’ve written in the R Script. R Console is the place inside RStudio where we are using the R programming language. Variable Environment - This area keeps track of your variables, data tables, filenames, etc. Anything that you run in R that has a name will be stored here. Imagine the Variable Environment to be your closet - every time you make/buy a new sweater, the sweater goes in the closet. We can select data tables to view from this list here. Files/Plots/Help - In this quadrant, we can toggle through files on our computer (we can view where your files are stored), view plots/visualizations that we’re creating in R (whenever you create a plot in R it is output here first), search for help and descriptions of R functions (there’s descriptions on every function you’ll use in R - they can all be loaded here in the help tab), and more. 3.3 Installing and Using Packages To use a function in R that performs a task (such as plotting, statistical analysis, etc.), we must first load the package into our R session. When we use Microsoft Excel, nearly all the functions you can use with it are available in the toolbar at the top of the page. In R, however, you’ll need to load in the packages you’d like to use. Once the package is loaded, R will recognize any functions you call that are part of that package. In R, the package is the toolbox; the function is the tool. We need to load the woodworking toolbox in order to use the hammer. Most of the packages you’ll want to use are not previously installed on R. You’ll need to install them onto your local machine. Once they are installed once, you shouldn’t have to worry about installing them again. Here’s how you install the ggplot2 package. install.packages(&quot;ggplot2&quot;) Paste this code into your console. Then hit enter and watch R run your code to install the packages! If R console returns with a question like, “Would you like to install from source? Yes / No” - answer with Yes. These packages we’re downloading contain pre-written code that other developers have created so we don’t have to recreate the wheel. Source is a location where the package is stored - it’s the initial location it was created, in fact. Think of the package download location as a Car Dealership - all car dealerships sell the same thing, but they all have different cars in different colors from different years. When we select source, we select a car directly from the manufacturer. 3.4 Loading the installed packages into R Here’s the code we use to load a package: library(ggplot2) You may be wondering, why do I need to load in the packages I want to use? R is designed to be fast. If you were to pre-load every single package available in R, you’d be loading thousands and thousands of packages. We can keep R light and fast by only loading the specific “toolboxes” we need. Now that the ggplot2 package is installed, we can use any function that is within that package. If you’re curious about what functions are in a particular package, most packages have thorough documentation and examples online. 3.5 Running Code In R, there are multiple ways to run code. Remember that we write code in an R Script and run that code in the console. We can execute code in the following ways: Click ‘Run’ at the top of the R script. Note that yours may not look the exact same, but just find a Run button to click! This option allows you to run sections of your code, line by line, or the whole script. While the cursor is on a line of code you want to run in the R script, Hit Ctrl + Enter on Windows, Cmd + Enter on Mac. This will run that line of code. Select and highlight the section of code you want to run in the R script, Hit Ctrl + Enter on Windows, Cmd + Enter on Mac.This will run that selected section of code. As you become more advanced, you’ll be able to write a script in RStudio and then run the entire script on your computer without opening it again. We won’t touch this in this workshop, but it’s straight-forward once you get the hang of it. 3.6 Checkpoint - Writing your first R code Let’s write an R script that prints out names, run the code to make sure it works properly, and then save it. # load the base package - remember the # key indicates a comment, R does not run these lines of code! library(base) # let&#39;s create a list with our names names = list(&#39;Peter&#39;, &#39;Sarah&#39;, &#39;Tom&#39;, &#39;Helen&#39;) # now let&#39;s use the print function to print out those names print(names) ## [[1]] ## [1] &quot;Peter&quot; ## ## [[2]] ## [1] &quot;Sarah&quot; ## ## [[3]] ## [1] &quot;Tom&quot; ## ## [[4]] ## [1] &quot;Helen&quot; You can copy and paste this code in your script quadrant and then Run the code as specified above. You can also paste it directly into your console and click enter but note that doing so this way will not save your code. We write scripts, save them, and then run them in the console. Here’s what it looks like when we copy it to the Script quadrant. Now here’s what it looks like after I run the code… 3.7 Explanation - Writing your first R code Line by Line Explanation In this example, we created a variable called names (the object or thing that we create in R that can be called on by it’s variable name - think of this a sa column in Excel). We used the list() function to populate a list of names (we know it’s a function because of the ()). Then we used the print() function to print out the names variable. Once the script has been written, we can navigate to File -&gt; Save As…-&gt; print_names.R . Remember, no spaces in the filename and it must be saved as .R. What’s going on with R/RStudio here? We wrote our script in the Script quadrant of Rstudio. When we were ready to run the script, we ran the code which sent the code down to the console quadrant. The console quadrant is where the R programming language is actually running. Our fancy RStudio application talks to R for us so we don’t have to. Note that our names variable can be found in the Variable Environment quadrant since we ran that object in R. It can now be called on anytime. Now we can see how RStudio is really the middle-man between us and R. Note the term using R may be used as short-hand for saying using RStudio - it’s no longer important to state the difference now that we know what’s really going on. 3.8 How does an R script generally flow? Now it’s time to get your hands dirty. We can sit and chat about all these things R can do and how to do them, but you won’t retain that information until you use R yourself. This will be confusing at first if you’re new to this type of programming, but the longer you spend with it, the more sense it will make. A typical R script will generally look like this: # James Simkins # Load libraries library(ncdf4) library(fields) ncFile &lt;- ncdf4::nc_open(&quot;~/Documents/Github/geog473-673/datasets/OR_ABI-L2-SSTF-M3_G16_s20192081300453_e20192081400161_c20192081406297.nc&quot;) sstK &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;SST&quot;) lat &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;latitude&quot;) lon &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;longitude&quot;) # convert sst from Kelvin to Celsius sstC &lt;- sstK - 273.15 # remove values below 0C sstC[sstC &lt; 0] = NA # Plot the matrix fields::image.plot(x=lon, y=lat, z=sstC, legend.lab=&quot;Celsius&quot;) title(&quot;GOES-R SST Product 7/25/2019 19:00 UTC&quot;) 3.9 Now Let’s Break Down This Script # Load libraries library(ncdf4) library(fields) In R, we need to call on packages/libraries that we want to load in. We do this via the “library()” function or the “require()” function - both do the same thing. Notice that we do this at the beginning of the script because R reads line by line and we need these loaded before we can use the functions within the packages. # Load libraries library(ncdf4) library(fields) ####################################### ncFile &lt;- ncdf4::nc_open(filename=&quot;~/Documents/Github/geog473-673/datasets/OR_ABI-L2-SSTF-M3_G16_s20192081300453_e20192081400161_c20192081406297.nc&quot;) sstK &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;SST&quot;) lat &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;latitude&quot;) lon &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;longitude&quot;) Object = something. In this case, object name is ncFile and it holds an opened NetCDF file. We open this file via the “nc_open” function that’s within the “ncdf4” library. Note the “ncdf4::” syntax. This is NOT necessary for coding in R. Once you load in the library, R knows what you mean when you type in a function such as “nc_open”. I added it here so you know where these functions are coming from. Notice that I use “&lt;-” for objects and “=” for arguments within the function. This is key, as I can use either “&lt;-” or “=” for objects (like ncFile or sstK) but I MUST use “=” within the function ‘walls’ (the parantheses). For those of you not used to NetCDF files, they’re an efficient filetype heavily used in physical sciences. Within each file, metadata (time, latitude info, longitude info, projection, etc.), and variables (sea surface temperature, latitude points, longitude points, chlorophyll, etc.) are stored in these. We open the netcdf file and then extract what we want out of it using “ncvar_get”, which is short for “netcdf variable get”. Confused about how to use ncvar_get? Try: # Load libraries library(ncdf4) library(fields) ncFile &lt;- ncdf4::nc_open(filename=&quot;~/Documents/Github/geog473-673/datasets/OR_ABI-L2-SSTF-M3_G16_s20192081300453_e20192081400161_c20192081406297.nc&quot;) sstK &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;SST&quot;) ####################################### This is a really attractive feature within R and exists for every function within an official R library. Now, back to the script… # Load libraries library(ncdf4) library(fields) ncFile &lt;- ncdf4::nc_open(filename=&quot;~/Documents/Github/geog473-673/datasets/OR_ABI-L2-SSTF-M3_G16_s20192081300453_e20192081400161_c20192081406297.nc&quot;) sstK &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;SST&quot;) ####################################### # convert sst from Kelvin to Celsius sstC &lt;- sstK - 273.15 The SST variable from the netCDF file was in Kelvin and we want to convert it to Celsius. Right now, sstK is a matrix. How do I know this? Look at your environment, or simply type into your console: # Load libraries library(ncdf4) library(fields) ncFile &lt;- ncdf4::nc_open(filename=&quot;~/Documents/Github/geog473-673/datasets/OR_ABI-L2-SSTF-M3_G16_s20192081300453_e20192081400161_c20192081406297.nc&quot;) sstK &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;SST&quot;) ####################################### class(sstK) ## [1] &quot;matrix&quot; Class is a useful function that is loaded with the base library everytime you fire up R. It tells us what type of object we have. Now that we know this is a matrix, we can subtract 0 Celsius, or 273.15 Kelvin. When we have a matrix in R and perform any math on it, it does that math on each and every matrix value. #Quick and Dirty Quality Control There are bad values that crept into the dataset and we need to convert all of them to NaN (aka Not A Number…also known as NA (Not Available) in R). How do we know there are bad values in this dataset? # Load libraries library(ncdf4) library(fields) ncFile &lt;- ncdf4::nc_open(filename=&quot;~/Documents/Github/geog473-673/datasets/OR_ABI-L2-SSTF-M3_G16_s20192081300453_e20192081400161_c20192081406297.nc&quot;) sstK &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;SST&quot;) ####################################### summary(as.vector(sstK)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## -999.0 286.9 300.0 278.2 302.0 310.0 2175822 summary() is another great base function. In order to use it on a matrix, we need to convert it to a vector - summary can’t do 2 dimensional objects like matrices, it needs a one dimensional vector of numbers. The “as.vector” function just says hey R read in sstK as a vector for me would ya? Notice the ‘Min’ in the summary output. -999? No way is that a valid Kelvin value, especially since we subtract another 273.15 to this number to make the the Celsius matrix. So clearly we have some bad data that we need to convert to NA’s. We do this by… library(ncdf4) library(fields) ncFile &lt;- ncdf4::nc_open(&quot;~/Documents/Github/geog473-673/datasets/OR_ABI-L2-SSTF-M3_G16_s20192081300453_e20192081400161_c20192081406297.nc&quot;) sstK &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;SST&quot;) lat &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;latitude&quot;) lon &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;longitude&quot;) # convert sst from Kelvin to Celsius sstC &lt;- sstK - 273.15 # remove values below 0C ####################################### sstC[sstC &lt; 0] = NA This line reads as: sstC where sstC is less than 0 equals NA. The brackets here can be thought of as the ‘condition’, that is what you’re looking to change. This is called a vector operation, which we will get more into later but these are important becuase it’s far faster to do this than a for loop. library(ncdf4) library(fields) ncFile &lt;- ncdf4::nc_open(&quot;~/Documents/Github/geog473-673/datasets/OR_ABI-L2-SSTF-M3_G16_s20192081300453_e20192081400161_c20192081406297.nc&quot;) sstK &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;SST&quot;) lat &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;latitude&quot;) lon &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;longitude&quot;) # convert sst from Kelvin to Celsius sstC &lt;- sstK - 273.15 # remove values below 0C ####################################### sstC[sstC &lt; 0] = NA summary(as.vector(sstC)) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 0.0 19.8 27.6 24.1 29.0 36.8 2679819 Now we see that our summary looks good (even though we’re looking at a matrix in celsius now). So all that’s left to do is plot this up… # James Simkins # Load libraries library(ncdf4) library(fields) ncFile &lt;- ncdf4::nc_open(&quot;~/Documents/Github/geog473-673/datasets/OR_ABI-L2-SSTF-M3_G16_s20192081300453_e20192081400161_c20192081406297.nc&quot;) sstK &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;SST&quot;) lat &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;latitude&quot;) lon &lt;- ncdf4::ncvar_get(nc=ncFile, varid=&quot;longitude&quot;) # convert sst from Kelvin to Celsius sstC &lt;- sstK - 273.15 # remove values below 0C sstC[sstC &lt; 0] = NA ####################################### # Plot the matrix fields::image.plot(x=lon, y=lat, z=sstC, legend.lab=&quot;Celsius&quot;) title(&quot;GOES-R SST Product 7/25/2019 19:00 UTC&quot;) Now we plot this up using the ‘image.plot()’ function from the ‘fields’ library. We just tell it to plot the sstC but notice that I didn’t place an argument in here. If you don’t tell image.plot() what an argument actually is, it assumes you’re following the order that the function was written in. If you declare arguments, such as ‘z=sstC’ or like ‘varid=“SST”’ from above, you can place the arguments in whatever order you want in that function. Notice that for this kind of plot, the ‘title()’ function is a separate function rather than an argument of ‘image.plot()’. This goes for a lot of plot aesthetics that we’ll get into later. Remember, if you’re ever confused about something like this just tell R you need ‘help()’. 3.10 In Class Exercise Go to https://github.com/jsimkins2/geog473-673/tree/master/datasets Download ‘OR_ABI-L2-SSTF-M3_G16_s20192081300453_e20192081400161_c20192081406297.nc’ Make simple plot of the ‘DQF’ (Data Quality Flag) variable -Hint: You may have to use ‘install.packages’ in your console first Aim for something like this: 3.11 DataTypes If you look into your environment from the in class exercise, you’ll notice under the ‘Data’ tab you have a large matrix of the DQF values. R stores these matrices without the column/row identifier (aka lat &amp; lon). We provide the image.plot() function with the lon &amp; lat arrays becuase it doesn’t know what the x &amp; y coordinates are of the matrix. Notice that the environment tells you the dimensions - the matrix is 2778 x 1989. R is indexed from 1 to the length of the dimension. Here is what I mean: dim(sstC) is 2778 1989 dim(lat) is 1989 lat[0] is numeric(0) lat[1] is 16.00283 lat[1989] is 51.98563 lat[1990] is NA The above tests are referred to as indexing. The 1st point of the lat array is 16.00283. In R, we index using brackets []. If you want to find more values other than just a single point, the procedure is referred to as slicing. lat[1:10] is 16.00283 16.02093 16.03903 16.05713 16.07523 16.09333 16.11143 16.12953 16.14763 16.16573 The lat object we’ve been exploring here is an ‘array’. An array is a vector with one or more dimensions. So, an array with one dimension is (almost) the same as a vector. An array with two dimensions is (almost) the same as a matrix. An array with three or more dimensions is an n-dimensional array. A vector is what is called an array in all other programming languages except R — a collection of cells with a fixed size where all cells hold the same type (integers or characters or reals or whatever). A list can hold items of different types and the list size can be increased on the fly. List contents can be accessed either by index (like mylist[[1]]) or by name (like mylist$age). mylist = list(&quot;delaware&quot;, &quot;pennsylvania&quot;, &quot;maryland&quot;) mylist[[1]] ## [1] &quot;delaware&quot; A matrix is a two-dimensional vector (fixed size, all cell types the same). A data frame is called a table in most languages. Each column holds the same type, and the columns can have header names. # load in base dataset data(mtcars) mtcars ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 Notice that it’s organized just like an excel spreadsheet. In essence, a dataframe in R is just an advanced Excel Spreadsheet. class(mtcars) ## [1] &quot;data.frame&quot; Let’s explore a column of this data: mtcars$mpg ## [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 ## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 ## [31] 15.0 21.4 Now let’s sort the entire dataset by this column from least to greatest mtcars[order(mtcars$mpg),] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 3.12 Essential Skills: The For Loop For loops &amp; conditional statements are a key skill in programming. They allow you to process through large datasets or multiple datasets thus minimizing the amount of manual work you need to do. The basic for loop looks like this… # Generate sequence of numbers from 1 to 10 using the seq() function (seq for sequence) numbersList = seq(from=1,to=10,by=1) # Multiply each number in the numbersList by 8 and print the result for (i in numbersList){ temNumber = i * 8 print(temNumber) } ## [1] 8 ## [1] 16 ## [1] 24 ## [1] 32 ## [1] 40 ## [1] 48 ## [1] 56 ## [1] 64 ## [1] 72 ## [1] 80 Notice the general structure of R for loops. ‘for’ signals to R you’re beginning a for loop, which requires the general structure to look like: for (something in something inside these parentheses){ do something within these curly brackets } Yes, you must have these parentheses and curly brackets present and surrounding the appropriate code. If you forget a parentheses or curly bracket you’ll have errors pop up…this happens to me all the time still. While these must be present, R doesn’t care where they are in your code (****which is very unique amongst programming languages). For example, notice how this ugly code is different but still runs… # Generate sequence of numbers from 1 to 10 using the seq() function (seq for sequence) numbersList = seq(from=1,to=10,by=1) # Multiply each number in the numbersList by 8 and print the result for ( i in numbersList ){ temNumber = i * 8 print(temNumber) } ## [1] 8 ## [1] 16 ## [1] 24 ## [1] 32 ## [1] 40 ## [1] 48 ## [1] 56 ## [1] 64 ## [1] 72 ## [1] 80 The general structure is still: for(condition){do something}. If statements are set up the same way # Generate sequence of numbers from 1 to 10 using the seq() function (seq for sequence) numbersList = seq(from=1,to=10,by=1) # Multiply each number in the numbersList by 8 and print the result for (i in numbersList){ if (i==4){ temNumber = i * 8 print(temNumber) } } ## [1] 32 This is referred to as a ‘nested loop’, because there is a conditional statement within another one. Key takeaway here: in programming languages, ‘=’ is an assignment (i.e. x = 4), whereas ‘==’ is an equality test (i == 4). To put this loop in layman’s terms: for i in numbersList, if i is equal to 4, multiply i by 8 and then print temNumber. We can also have nested for loops. # Generate sequence of numbers from 1 to 3 this time using the seq() function (seq for sequence) numbersList = seq(from=1,to=3,by=1) lettersList = list(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) for (num in numbersList){ for (let in lettersList){ print(c(num,let)) } } ## [1] &quot;1&quot; &quot;A&quot; ## [1] &quot;1&quot; &quot;B&quot; ## [1] &quot;1&quot; &quot;C&quot; ## [1] &quot;2&quot; &quot;A&quot; ## [1] &quot;2&quot; &quot;B&quot; ## [1] &quot;2&quot; &quot;C&quot; ## [1] &quot;3&quot; &quot;A&quot; ## [1] &quot;3&quot; &quot;B&quot; ## [1] &quot;3&quot; &quot;C&quot; You can name the object within the list whatever you want (i, j, num, let, etc.). Also, c() is the concatenate functin that combines values into a vector or list. The order doesn’t matter in this for loop… # Generate sequence of numbers from 1 to 3 this time using the seq() function (seq for sequence) numbersList = seq(from=1,to=3,by=1) lettersList = list(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) for (let in lettersList){ for (num in numbersList){ print(c(num,let)) } } ## [1] &quot;1&quot; &quot;A&quot; ## [1] &quot;2&quot; &quot;A&quot; ## [1] &quot;3&quot; &quot;A&quot; ## [1] &quot;1&quot; &quot;B&quot; ## [1] &quot;2&quot; &quot;B&quot; ## [1] &quot;3&quot; &quot;B&quot; ## [1] &quot;1&quot; &quot;C&quot; ## [1] &quot;2&quot; &quot;C&quot; ## [1] &quot;3&quot; &quot;C&quot; But it does in this one… # Generate sequence of numbers from 1 to 10 using the seq() function (seq for sequence) numbersList = seq(from=1,to=10,by=1) # Multiply each number in the numbersList by 8 and print the result if (i==4){ for (i in numbersList){ temNumber = i * 8 print(temNumber) } } Here’s one more example for multi conditional statement with an else… # Generate sequence of numbers from 1 to 3 this time using the seq() function (seq for sequence) numbersList = seq(from=1,to=3,by=1) lettersList = list(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) for (num in numbersList){ for (let in lettersList){ if (num == 3 &amp;&amp; let == &quot;B&quot;){ print(c(num,let)) } else{ print(&quot;Not what we want&quot;) } } } ## [1] &quot;Not what we want&quot; ## [1] &quot;Not what we want&quot; ## [1] &quot;Not what we want&quot; ## [1] &quot;Not what we want&quot; ## [1] &quot;Not what we want&quot; ## [1] &quot;Not what we want&quot; ## [1] &quot;Not what we want&quot; ## [1] &quot;3&quot; &quot;B&quot; ## [1] &quot;Not what we want&quot; &amp;&amp; means “and” … || means “or”…these are useful in multi conditional statements. The ‘else’ statement is an appendage of the ‘if’ statement. It basically means if num == 3 and let == B is false, print “not what we want”. Notice that the ‘else’ statement is outside of the ‘if’ statement but immediately after it. In Class Exercise: debug this for loop soiltype &lt;- list(&quot;sand&quot;, &quot;silt&quot;, &quot;saline&quot;, &quot;clay&quot;, &quot;peat&quot;) permeability &lt;- c(0.09, 0.05, 0.03, 0.01, 0.005) for (s in seq(length(soiltype)){ print(a) for (p in permeability) if (p == 0.05 | p == 0.005){ print(permeability[s]) } } } And get this output… ## [1] 1 ## [1] 0.09 ## [1] 0.09 ## [1] 2 ## [1] 0.05 ## [1] 0.05 ## [1] 3 ## [1] 0.03 ## [1] 0.03 ## [1] 4 ## [1] 0.01 ## [1] 0.01 ## [1] 5 ## [1] 0.005 ## [1] 0.005 3.13 DEOS Data Delaware has the highest concentration of environmental monitoring stations in the country thanks to DEOS (Delaware Environmental Observing System) which is controlled by University of Delaware’s CEMA (Center for Environmental Monitoring and Analysis). The data collected using this dense network is useful for a variety of purposes. Let’s dive into some data - find the file (https://github.com/jsimkins2/geog473-673/tree/master/datasets) - download it, unzip it, and open it up in R! deos_data &lt;- read.csv(&quot;/Users/james/Documents/Github/geog473-673/datasets/DEOS.csv&quot;, header = TRUE, skip=0, stringsAsFactors = FALSE) head(deos_data) ## Timestamp..UTC. Air.Temperature.deg..C. Dew.Point.Temperature.deg..C. ## 1 2014-04-04 04:05 7.1 4.3 ## 2 2014-04-04 04:10 6.9 4.3 ## 3 2014-04-04 04:15 6.8 4.3 ## 4 2014-04-04 04:20 6.7 4.4 ## 5 2014-04-04 04:25 6.6 4.4 ## 6 2014-04-04 04:30 6.6 4.4 ## Wind.Speed.m.sec. Wind.Direction.deg.. Barometric.Pressure.. ## 1 3.7 351.7 NA ## 2 3.5 352.9 NA ## 3 3.9 357.5 NA ## 4 3.9 356.8 NA ## 5 3.3 5.5 NA ## 6 2.7 18.4 NA ## Solar.Radiation.UNKNOWN. Wind.Gust.Speed..5..m.sec. ## 1 0 5.1 ## 2 0 5.8 ## 3 0 6.2 ## 4 0 5.9 ## 5 0 4.9 ## 6 0 3.5 ## Gage.Precipitation..5..mm. ## 1 0.00 ## 2 0.00 ## 3 0.25 ## 4 0.00 ## 5 0.00 ## 6 0.00 summary(deos_data) ## Timestamp..UTC. Air.Temperature.deg..C. Dew.Point.Temperature.deg..C. ## Length:182645 Min. :-51.0 Min. :-53.300 ## Class :character 1st Qu.: 7.6 1st Qu.: 2.200 ## Mode :character Median : 15.2 Median : 10.200 ## Mean : 14.1 Mean : 8.505 ## 3rd Qu.: 21.2 3rd Qu.: 16.200 ## Max. : 37.0 Max. : 25.500 ## Wind.Speed.m.sec. Wind.Direction.deg.. Barometric.Pressure.. ## Min. : 0.100 Min. : 0.0 Mode:logical ## 1st Qu.: 1.800 1st Qu.: 99.3 NA&#39;s:182645 ## Median : 2.600 Median :202.2 ## Mean : 2.997 Mean :187.0 ## 3rd Qu.: 3.700 3rd Qu.:258.9 ## Max. :16.700 Max. :360.0 ## Solar.Radiation.UNKNOWN. Wind.Gust.Speed..5..m.sec. Gage.Precipitation..5..mm. ## Min. : 0.0 Min. : 0.100 Min. :0.00000 ## 1st Qu.: 0.0 1st Qu.: 2.900 1st Qu.:0.00000 ## Median : 4.0 Median : 4.400 Median :0.00000 ## Mean : 192.7 Mean : 4.907 Mean :0.01354 ## 3rd Qu.: 313.0 3rd Qu.: 6.400 3rd Qu.:0.00000 ## Max. :1335.0 Max. :24.400 Max. :9.65000 #the variable names look wonky because they have spaces in them - spaces in variable names is a big no-no #change the names to something more readable names(deos_data) = c(&quot;datetime&quot;, &quot;air_temperature&quot;, &quot;dewpoint&quot;, &quot;windspeed&quot;, &quot;winddirection&quot;, &quot;pressure&quot;, &quot;solar_radiation&quot;, &quot;wind_gust&quot;, &quot;precipitation&quot;) deos_data$datetime[1] ## [1] &quot;2014-04-04 04:05&quot; class(deos_data$datetime) ## [1] &quot;character&quot; # give it a datetime class, notice the format deos_data$datetime = as.POSIXct(deos_data$datetime, format = &#39;%Y-%m-%d %H:%M&#39;) # subset the data using the which.min() and which.max() functions to find our indices low_ind = which.min(deos_data$datetime &lt; &quot;2014-04-04 00:00:00&quot;) upper_ind = which.max(deos_data$datetime &gt; &quot;2015-04-04 23:59&quot;) plot(deos_data$datetime[low_ind:upper_ind], deos_data$air_temperature[low_ind:upper_ind], type = &quot;l&quot;, col = &#39;red&#39;, xlab = paste0(deos_data$datetime[low_ind], &quot; to &quot;, deos_data$datetime[upper_ind]), ylab = &quot;Celsius&quot;) title(&quot;1 Year Air Temperature at Station&quot;) #subset the data using the subset function subDeos = subset(deos_data, deos_data$datetime &gt;= &quot;2014-07-04 00:00:00&quot; &amp; deos_data$datetime &lt;= &quot;2014-07-11 23:59:00&quot;) # Now add dewpoint to that plot plot(subDeos$datetime, subDeos$air_temperature, type = &quot;l&quot;, col = &#39;red&#39;, xlab = paste0(subDeos$datetime[1], &quot; to &quot;, subDeos$datetime[length(subDeos$datetime)]), ylab = &quot;Celsius&quot;, ylim = c(5,40)) lines(subDeos$datetime, subDeos$dewpoint, col = &#39;yellow&#39;) legend(&#39;bottomright&#39;, legend=c(&#39;Air Temp&#39;, &#39;Dew Pt&#39;), col = c(&#39;red&#39;, &#39;yellow&#39;), lty = c(1, 1)) title(&quot;Air Temperature &amp; Dew Point Temperature&quot;) Assignment: Subset dataset to January 2015 only Convert Wind Speed &amp; Wind Gust data from m/s to mph Plot wind speed and wind gust on same plot - wind speed as lines and wind gust as points Add legend Compute correlation coefficient between wind gust and wind speed using cor() function - add to title of plot Deliver Resulting Plot to Canvas assignment week3 "],
["essential-skills-the-for-loop-with-paste0.html", "4 Essential Skills: The For Loop with Paste0", " 4 Essential Skills: The For Loop with Paste0 Last week we covered the for loop which is an essential programming skill. We also touched on the paste0 function, but this is incredibly useful and should be expanded upon. paste0() is the sister function of paste(), who’s cousin is sprintf() . It depends on preference, but most coders I know gravitate towards paste0(). Let’s check out all 3. # Paste Example 1 - default sep (aka separation) is space paste(&quot;file&quot;, &quot;number&quot;, &quot;32&quot;) ## [1] &quot;file number 32&quot; # Paste Example 2 - set sep to &quot;_&quot; paste(&quot;file&quot;, &quot;number&quot;, &quot;32&quot;, sep = &quot;_&quot;) ## [1] &quot;file_number_32&quot; # Paste0 Example 1 - 0 for 0 separating characters paste0(&quot;file&quot;, &quot;number&quot;, &quot;32&quot;) ## [1] &quot;filenumber32&quot; # sprintf example 1 sprintf(&quot;%s %s %s&quot;, &quot;file&quot;, &quot;number&quot;, &quot;32&quot;) ## [1] &quot;file number 32&quot; # sprintf example 2 person &lt;-&quot;Grover&quot; action &lt;-&quot;flying&quot; message(sprintf(&quot;On %s I realized %s was...\\n%s by the street&quot;, Sys.Date(), person, action)) ## On 2020-08-24 I realized Grover was... ## flying by the street # Notice that paste() is limiting because the separating character is not always present between # each string you&#39;re concatenating # Let&#39;s use paste0 here fileList &lt;- c(&#39;filename1&#39;, &#39;filename2&#39;, &#39;filename3&#39;, &#39;filename4&#39;) dateFolder &lt;- c(&#39;0813&#39;, &#39;0814&#39;, &#39;0815&#39;, &#39;0816&#39;) homeDir &lt;- &quot;~/Documents/&quot; pathList &lt;- list() for (i in 1:length(fileList)){ print(i) tempString &lt;- paste0(homeDir, dateFolder[i], &#39;/&#39;, fileList[i]) pathList[i] &lt;- tempString } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 pathList ## [[1]] ## [1] &quot;~/Documents/0813/filename1&quot; ## ## [[2]] ## [1] &quot;~/Documents/0814/filename2&quot; ## ## [[3]] ## [1] &quot;~/Documents/0815/filename3&quot; ## ## [[4]] ## [1] &quot;~/Documents/0816/filename4&quot; pathList[[1]] ## [1] &quot;~/Documents/0813/filename1&quot; # Now let&#39;s rewrite using sprintf fileList &lt;- c(&#39;filename1&#39;, &#39;filename2&#39;, &#39;filename3&#39;, &#39;filename4&#39;) dateFolder &lt;- c(&#39;0813&#39;, &#39;0814&#39;, &#39;0815&#39;, &#39;0816&#39;) homeDir &lt;- &quot;~/Documents/&quot; pathList &lt;- list() pathList &lt;- sprintf(&quot;%s%s/%s&quot;, homeDir, dateFolder, fileList) pathList ## [1] &quot;~/Documents/0813/filename1&quot; &quot;~/Documents/0814/filename2&quot; ## [3] &quot;~/Documents/0815/filename3&quot; &quot;~/Documents/0816/filename4&quot; pathList[[1]] ## [1] &quot;~/Documents/0813/filename1&quot; #sprintf is a very useful and quick function for combining various strings into longer strings #but paste0 allows you a little more freedom and is slightly more intuitive Debug and fix the following code: # Let&#39;s use paste0 here fileList &lt;- c(&#39;sstData20190912&#39;, &#39;sstData20190913&#39;, &#39;sstData20190914&#39;, &#39;sstData20190915&#39;) dateFolder &lt;- seq(0912, 0915, 1) homeDir &lt;- &quot;~/Documents/&quot; pathList &lt;- list() for (i in fileList){ print(i) tempString &lt;- paste0(homeDir, dateFolder[i], &#39;/&#39;, i) pathList[i] &lt;- tempString } pathList pathList[[1]] The final pathList[[1]] should look like this… &quot;~/Documents/0912/sstData20190912&quot; "],
["rasters-with-oceanography.html", "5 Rasters with Oceanography 5.1 Plot GOES-R Rolling 1 day data 5.2 Recapping Skills: Indexing Data 5.3 Resampling and Reprojecting data in R 5.4 Example of how to save directly to PNG 5.5 Example of how to write a raster out to geotiff or netcdf 5.6 In Class Assignment", " 5 Rasters with Oceanography 5.1 Plot GOES-R Rolling 1 day data library(maptools) # also loads sp package library(sp) library(ncdf4) library(raster) library(rasterVis) library(RColorBrewer) ncFile &lt;- nc_open(&quot;/Users/james/Documents/Github/geog473-673/datasets/GOES_R_ROLLING_1DAY_20190814.nc&quot;) sstGoes &lt;- ncvar_get(ncFile, varid = &quot;sst&quot;) sstRast &lt;- raster(sstGoes) # plot using quick &#39;image&#39; function from raster image(sstRast) # netcdf stores data backwards, so to convert it to raster we need to transpose it sstRast &lt;- t(sstRast) # plot using quick &#39;image&#39; function from raster image(sstRast) # now we see that the data is just upside down, so we use the flip() function sstRast &lt;- flip(sstRast, 2) # plot using quick &#39;image&#39; function from raster image(sstRast) sstRast ## class : RasterLayer ## dimensions : 1989, 2778, 5525442 (nrow, ncol, ncell) ## resolution : 0.0003599712, 0.0005027652 (x, y) ## extent : 0, 1, 0, 1 (xmin, xmax, ymin, ymax) ## crs : NA ## source : memory ## names : layer ## values : 5.344696, 34.9397 (min, max) # notice that the extent and crs information are wrong/not included so let&#39;s fix this lat = ncvar_get(ncFile, &quot;latitude&quot;) lon = ncvar_get(ncFile, &quot;longitude&quot;) # define new extents for the raster extent(sstRast) = c(min(lon), max(lon), min(lat), max(lat)) # define the proj4 projection string crs(sstRast) = &quot;+proj=longlat +datum=WGS84 +no_defs &quot; sstRast ## class : RasterLayer ## dimensions : 1989, 2778, 5525442 (nrow, ncol, ncell) ## resolution : 0.01799352, 0.0180909 (x, y) ## extent : -99.99015, -50.00415, 16.00283, 51.98563 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 ## source : memory ## names : layer ## values : 5.344696, 34.9397 (min, max) image(sstRast) # load raster Visualization package library(rasterVis) # levelplot the sstRast levelplot(sstRast) # USA shapefiles via the getData function usa &lt;- getData(&#39;GADM&#39;, country = &#39;USA&#39;, level = 1) # Throw together the usa spatial polygons data frame plt &lt;- levelplot(sstRast, margin=F, par.settings=BuRdTheme, main=&quot;GOES-R Rolling SST 08/14&quot;) plt + layer(sp.polygons(usa, col=&#39;black&#39;,fill=&#39;grey&#39;, lwd=0.4)) # Now let&#39;s do the same with geotiff tifFile = &quot;/Users/james/Documents/Github/geog473-673/datasets/goesSST.tif&quot; sstRast = raster(tifFile) # Quick image using raster&#39;s image plot generator function image(sstRast) # Now let&#39;s load a base dataset of world maps that R already has stored data(wrld_simpl) plt &lt;- levelplot(sstRast, margin=F, par.settings=BuRdTheme, main=&quot;GOES-R Rolling SST 08/14&quot;) plt + layer(sp.lines(wrld_simpl, col=&#39;black&#39;, lwd=0.4)) # Let&#39;s do the same plot but with a custom shapefile # note that even though we only point the function to the &#39;.shp&#39; file, the &#39;.shx&#39; and &#39;.dbf&#39; need to be in the same folder for this to work. world.shp &lt;- rgdal::readOGR(&quot;/Users/james/Documents/Github/geog473-673/datasets/world_shpfiles/world.shp&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/Users/james/Documents/Github/geog473-673/datasets/world_shpfiles/world.shp&quot;, layer: &quot;world&quot; ## with 252 features ## It has 2 fields # add custom color theme using brewer.pal from the package RColorBrewer and setting the rasterTheme mapTheme &lt;- rasterTheme(region=brewer.pal(8,&quot;Reds&quot;)) plt &lt;- levelplot(sstRast, margin=F, par.settings=mapTheme, main=&quot;GOES-R Rolling SST 08/14&quot;) plt + layer(sp.lines(world.shp, col=&#39;gray&#39;, lwd=0.4)) Assignment: Download treecov.nc from the datasets folder Open tree cover % as a variable, remove bad values. Plot tree cover variable using a green theme. Be sure to add coastlines via your choice of underlying dataset. Ensure correct latitude/longitudes are displayed. Add title. Submit resulting image to Canvas assignment 4 5.2 Recapping Skills: Indexing Data matA=matrix(1:16,4,4) matA ## [,1] [,2] [,3] [,4] ## [1,] 1 5 9 13 ## [2,] 2 6 10 14 ## [3,] 3 7 11 15 ## [4,] 4 8 12 16 matA[2,3] ## [1] 10 matA[c(1,3),c(2,4)] ## [,1] [,2] ## [1,] 5 13 ## [2,] 7 15 matA[1:3,2:4] ## [,1] [,2] [,3] ## [1,] 5 9 13 ## [2,] 6 10 14 ## [3,] 7 11 15 matA[1:2,] ## [,1] [,2] [,3] [,4] ## [1,] 1 5 9 13 ## [2,] 2 6 10 14 matA[,1:2] ## [,1] [,2] ## [1,] 1 5 ## [2,] 2 6 ## [3,] 3 7 ## [4,] 4 8 matA[1,] ## [1] 1 5 9 13 dim(matA) ## [1] 4 4 ##In Class Exercise: Starting with this code… matA=matrix(1:16,4,4) Make this matrix…. ## [,1] [,2] [,3] [,4] ## [1,] 1 10 18 26 ## [2,] 47 47 47 47 ## [3,] 6 14 22 39 ## [4,] 8 16 24 32 5.3 Resampling and Reprojecting data in R # load in the packages library(raster) library(rasterVis) library(maptools) # also loads sp package # load in dataset directly via raster package, specify varname which is &#39;tem&#39; for &#39;temperature&#39; temClim = raster(&quot;/Users/james/Documents/Github/geog473-673/datasets/globalTemClim1961-1990.nc&quot;, varname = &#39;tem&#39;, band=1) temClim ## class : RasterLayer ## band : 1 (of 12 bands) ## dimensions : 36, 72, 2592 (nrow, ncol, ncell) ## resolution : 5, 5 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 ## source : /Users/james/Documents/Github/geog473-673/datasets/globalTemClim1961-1990.nc ## names : CRU_Global_1961.1990_Mean_Monthly_Surface_Temperature_Climatology ## z-value : 1 ## zvar : tem # Create a new, blank raster that has a totally different sizing newRaster = raster() newRaster ## class : RasterLayer ## dimensions : 180, 360, 64800 (nrow, ncol, ncell) ## resolution : 1, 1 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 #resample the temClim raster to the resizedRaster resTemClim = resample(x=temClim, y=newRaster, method=&#39;bilinear&#39;) resTemClim ## class : RasterLayer ## dimensions : 180, 360, 64800 (nrow, ncol, ncell) ## resolution : 1, 1 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 ## source : memory ## names : CRU_Global_1961.1990_Mean_Monthly_Surface_Temperature_Climatology ## values : -48.8, 32 (min, max) #define new projection as robinson via a proj4 string. Note that this can also be achieved # using EPSG codes with the following - &quot;+init=epsg:4326&quot; for longlat newproj &lt;- CRS(&quot;+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs&quot; ) newproj ## CRS arguments: ## +proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m ## +no_defs +towgs84=0,0,0 # reproject the raster to the new projection projTemClim = projectRaster(resTemClim,crs=newproj) projTemClim ## class : RasterLayer ## dimensions : 171, 372, 63612 (nrow, ncol, ncell) ## resolution : 94500, 107000 (x, y) ## extent : -17570274, 17583726, -9136845, 9160155 (xmin, xmax, ymin, ymax) ## crs : +proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0 ## source : memory ## names : CRU_Global_1961.1990_Mean_Monthly_Surface_Temperature_Climatology ## values : -48.15073, 31.77627 (min, max) data(wrld_simpl) plt &lt;- levelplot(resTemClim, margin=F, par.settings=BuRdTheme, main=&quot;January Global Average Temp 1961-1990&quot;) plt + layer(sp.lines(wrld_simpl, col=&#39;black&#39;, lwd=0.4)) # convert the wrld_simpl land polygons to the robinson projection wrld_simpl = spTransform(wrld_simpl, CRS(&quot;+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs&quot; )) plt &lt;- levelplot(projTemClim, margin=F, par.settings=BuRdTheme, main=&quot;January Global Average Temp 1961-1990&quot;) plt + layer(sp.lines(wrld_simpl, col=&#39;black&#39;, lwd=0.4)) 5.4 Example of how to save directly to PNG The png() function is a function that saves a plot to png. After we invoke the function and fill out the arguments, we need to execute the plot code between the png() function and dev.off(). dev.off() tells R that you’re done adding things to the plot and that it can be done plotting. png(filename = &quot;~/Downloads/myPNG.png&quot;, width = 10, height = 6, units = &#39;in&#39;,res=100) plt &lt;- levelplot(projTemClim, margin=F, par.settings=BuRdTheme, main=&quot;January Global Average Temp 1961-1990&quot;) plt + layer(sp.lines(wrld_simpl, col=&#39;black&#39;, lwd=0.4)) dev.off() 5.5 Example of how to write a raster out to geotiff or netcdf writeRaster(x=projTemClim, filename=&quot;~/Downloads/projectedTemClim1961-1990.tif&quot;, format=&#39;GTiff&#39;, varname=&quot;Temperature&quot;, longname=&quot;Global Average Temperature January 1960-1990&quot;, xname=&quot;lon&quot;, yname=&quot;lat&quot;) 5.6 In Class Assignment Load in globalTemClim1961-1990.nc Extract data for January and July Find difference between two months globally Enhance resolution 2x using nearest neighbor method Plot in mollwide projection Write raster to NetCDF Upload PNG and netCDF file to Canvas under week 5 assignment "]
]
