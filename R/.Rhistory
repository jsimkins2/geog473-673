x = c(1,2,NA,4)
mean(x)
mean(x, na.rm = TRUE)
x <- 0:10
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
data('mtcars')
# print out the first few rows of the dataset using the head() function
head(mtcars)
# print the class of the mtcars dataset
class(mtcars)
# dimensions of the mtcars dataframe
dim(mtcars)
# number of rows
nrow(mtcars)
# number of columns
ncol(mtcars)
# column names
colnames(mtcars)
# row names
rownames(mtcars)
# selecting the miles per gallon column
mtcars["mpg"]
# selecting the vector of the mpg column
mtcars$mpg
# printing a summary of the dataframe
summary(mtcars)
# indexing the first 5 rows, including all of the columns
mtcars[1:5,]
# indexing the first 5 rows and the 1st column
mtcars[1:5,1]
# creating a barplot of mpg for the first 5 cars
barplot(height = mtcars$mpg, names.arg = rownames(mtcars))
plot(mtcars$mpg, mtcars$wt)
?plot
plot(x = mtcars$wt, y = mtcars$mpg, xlab = "Weight", ylab = "Miles per Gallon", main = "Cars Dataset")
plot(x = mtcars$mpg, y = mtcars$wt, xlab = "Miles per Gallon",  ylab = "Weight", main = "Cars Dataset")
mtcars$wt
plot(x = mtcars$mpg, y = mtcars$wt, xlab = "Miles per Gallon",  ylab = "Weight (tons)", main = "Cars Dataset")
mtcars
mtcars[3,5]
library(data.table)
library(dplyr)
library(ggplot2)
library(stringr)
library(DT)
library(tidyr)
library(corrplot)
library(leaflet)
library(lubridate)
# now let's load in our dataset using read.csv
avocado_df <- read.csv("datasets/avocado.csv")
avocado_df <- read.csv("Documents/Github/pubforge/excelToRbook/datasets/avocado.csv")
avocado_df$AveragePrice
avocado_df$profit = ifelse(test = avocado_df$region == 'California', yes = avocado_df$profit * 1.05, no = avocado_df$profit * 1)
cali = avocado_df[avocado_df$region == 'California',]
datatable(head(cali,30), style="default", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))
ggplot(cali, aes(x=profit,  fill=type)) + geom_density() + facet_wrap(~type) +
theme(plot.title=element_text(hjust=0.5), legend.position="bottom") + labs(title="Profit by avocado Type")
us = avocado_df[avocado_df$region == 'TotalUS',]
ggplot(us, aes(x=Date,  y=AveragePrice)) + geom_point() + facet_wrap(~type) +
theme(plot.title=element_text(hjust=0.5), legend.position="bottom") + labs(title="Revenue by avocado Type")
ggplot(us, aes(x=Date,  y=profit)) + geom_point() + facet_wrap(~type) +
theme(plot.title=element_text(hjust=0.5), legend.position="bottom") + labs(title="Profit by avocado Type")
ggplot(us, aes(x=Date,  y=AveragePrice)) + geom_point() + facet_wrap(~type) +
theme(plot.title=element_text(hjust=0.5), legend.position="bottom") + labs(title="Revenue by avocado Type")
avocado_df$X = NULL
avocado_df$X4046 = NULL
avocado_df$X4225 = NULL
avocado_df$X4770 = NULL
avocado_df$XLarge.Bags = NULL
av_revenue = avocado_df$Total.Volume * avocado_df$AveragePrice
avocado_df['revenue'] = av_revenue
avocado_df$profit <- NA
avocado_df$type[1]
## use the logical operator to test that avocado_df$type[1] is equal to 'conventional'
avocado_df$type[1] == 'conventional'
avocado_df$profit = ifelse(test = avocado_df$type == 'conventional', yes = (avocado_df$revenue * 0.15), no = (avocado_df$revenue * 0.45))
datatable(head(avocado_df,30), style="default", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))
avocado_df$profit = ifelse(test = avocado_df$region == 'California', yes = avocado_df$profit * 1.05, no = avocado_df$profit * 1)
cali = avocado_df[avocado_df$region == 'California',]
datatable(head(cali,30), style="default", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))
ggplot(cali, aes(x=profit,  fill=type)) + geom_density() + facet_wrap(~type) +
theme(plot.title=element_text(hjust=0.5), legend.position="bottom") + labs(title="Profit by avocado Type")
us = avocado_df[avocado_df$region == 'TotalUS',]
ggplot(us, aes(x=Date,  y=revenue)) + geom_point() + facet_wrap(~type) +
theme(plot.title=element_text(hjust=0.5), legend.position="bottom") + labs(title="Revenue by avocado Type")
ggplot(us, aes(x=Date,  y=profit)) + geom_point() + facet_wrap(~type) +
theme(plot.title=element_text(hjust=0.5), legend.position="bottom") + labs(title="Profit by avocado Type")
head(avocado_df)
ggplot(us, aes(x=Date,  y=AveragePrice)) + geom_point() + facet_wrap(~type) +
theme(plot.title=element_text(hjust=0.5), legend.position="bottom") + labs(title="Revenue by avocado Type")
ggplot(us, aes(x=Date,  y=Total.Volume)) + geom_point() + facet_wrap(~type) +
theme(plot.title=element_text(hjust=0.5), legend.position="bottom") + labs(title="Profit by avocado Type")
ggplot(us, aes(x=Date,  y=Total.Volume)) + geom_point() + facet_wrap(~type) +
theme(plot.title=element_text(hjust=0.5), legend.position="bottom") + labs(title="Profit by avocado Type")
library(data.table)
library(dplyr)
library(ggplot2)
library(tibbletime)
avocado_df$Date <- as.Date(avocado_df$Date, "%Y-%m-%d")
class(avocado_df$Date)
avocado_df <- avocado_df[order(avocado_df$Date),]
head(avocado_df$Date)
price_trend <- select(.data = avocado_df, Date, AveragePrice, type)
ggplot(data = price_trend, aes(x = Date, y = AveragePrice, col=type)) +
geom_line() +
facet_wrap(~type) + theme(legend.position="bottom")
ggplot(data = price_trend, aes(x = Date, y = AveragePrice, col=type)) +
geom_line() +
facet_wrap(~ type) + theme_minimal() + theme(legend.position="bottom") + scale_color_manual(values=c("blue", "green"))
ggplot(data = price_trend, aes(x = Date, y = AveragePrice, col=type)) +
geom_line() +
facet_wrap(~ type) + theme_minimal() + theme(legend.position="bottom") + scale_color_manual(values=c("dodgerblue4", "darkgreen"))
organic <- select(.data = filter(.data = avocado_df,type == "organic"), Date, AveragePrice, type, Total.Volume)
conventional <- select(.data = filter(.data = avocado_df,type == "conventional"), Date, AveragePrice, type, Total.Volume)
organic <- as_tbl_time(organic, index=Date)
class(organic)
datatable(head(organic,10), style="default", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))
organic <- as_period(organic, '1 month')
datatable(head(organic,10), style="default", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))
conventional <- as_tbl_time(conventional, index=Date)
conventional <- as_period(conventional, '1 month')
conventional_price <- ggplot(data = conventional, aes(x=Date, y=AveragePrice)) + geom_line(color="dodgerblue2") +
labs(title="Conventional Avocados") + geom_hline(yintercept=max(conventional$AveragePrice), linetype="dashed", color = "red") +
geom_hline(yintercept=min(conventional$AveragePrice), linetype="dashed", color = "blue")
# Let's create a conventional volume chart
conventional_volume <- ggplot(data = conventional, aes(x=Date, y=Total.Volume)) + geom_bar(stat='identity', fill="dodgerblue2", color="black") +
geom_smooth(method="loess", color="red")
# Let's create an organic average price chart
organic_price = ggplot(data = organic, aes(x=Date, y=AveragePrice)) + geom_line(color="darkgreen")
labs(title="Organic Avocados") + geom_hline(yintercept=max(organic$AveragePrice), linetype="dashed", color = "red") +
geom_hline(yintercept=min(organic$AveragePrice), linetype="dashed", color = "blue")
# Let's create a organic volume chart
organic_volume <- ggplot(data = organic, aes(x=Date, y=Total.Volume)) + geom_bar(stat='identity', fill="darkgreen",color="black") + geom_smooth(method="loess", color="yellow")
#now use cowplot plot_grid to plot all 4 plots in the same window
plot_grid(conventional_price, organic_price,conventional_volume, organic_volume, nrow=2, ncol=2)
library(data.table)
library(dplyr)
library(ggplot2)
library(tibbletime)
library(cowplot)
conventional_price <- ggplot(data = conventional, aes(x=Date, y=AveragePrice)) + geom_line(color="dodgerblue2") +
labs(title="Conventional Avocados") + geom_hline(yintercept=max(conventional$AveragePrice), linetype="dashed", color = "red") +
geom_hline(yintercept=min(conventional$AveragePrice), linetype="dashed", color = "blue")
# Let's create a conventional volume chart
conventional_volume <- ggplot(data = conventional, aes(x=Date, y=Total.Volume)) + geom_bar(stat='identity', fill="dodgerblue2", color="black") +
geom_smooth(method="loess", color="red")
# Let's create an organic average price chart
organic_price = ggplot(data = organic, aes(x=Date, y=AveragePrice)) + geom_line(color="darkgreen")
labs(title="Organic Avocados") + geom_hline(yintercept=max(organic$AveragePrice), linetype="dashed", color = "red") +
geom_hline(yintercept=min(organic$AveragePrice), linetype="dashed", color = "blue")
# Let's create a organic volume chart
organic_volume <- ggplot(data = organic, aes(x=Date, y=Total.Volume)) + geom_bar(stat='identity', fill="darkgreen",color="black") + geom_smooth(method="loess", color="yellow")
#now use cowplot plot_grid to plot all 4 plots in the same window
plot_grid(conventional_price, organic_price,conventional_volume, organic_volume, nrow=2, ncol=2)
plot_grid(conventional_price, organic_price,conventional_volume, organic_volume, nrow=2, ncol=2)
conventional_price <- ggplot(data = conventional, aes(x=Date, y=AveragePrice)) + geom_line(color="dodgerblue2") +
labs(title="Conventional Avocados") + geom_hline(yintercept=max(conventional$AveragePrice), linetype="dashed", color = "red") +
geom_hline(yintercept=min(conventional$AveragePrice), linetype="dashed", color = "blue")
# Let's create a conventional volume chart
conventional_volume <- ggplot(data = conventional, aes(x=Date, y=Total.Volume)) + geom_bar(stat='identity', fill="dodgerblue2", color="black") +
geom_smooth(method="loess", color="red")
# Let's create an organic average price chart
organic_price = ggplot(data = organic, aes(x=Date, y=AveragePrice)) + geom_line(color="darkgreen") +
labs(title="Organic Avocados") + geom_hline(yintercept=max(organic$AveragePrice), linetype="dashed", color = "red") +
geom_hline(yintercept=min(organic$AveragePrice), linetype="dashed", color = "blue")
# Let's create a organic volume chart
organic_volume <- ggplot(data = organic, aes(x=Date, y=Total.Volume)) + geom_bar(stat='identity', fill="darkgreen",color="black") + geom_smooth(method="loess", color="yellow")
#now use cowplot plot_grid to plot all 4 plots in the same window
plot_grid(conventional_price, organic_price,conventional_volume, organic_volume, nrow=2, ncol=2)
library("abind", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
detach("package:abind", unload=TRUE)
val <- 1
print(val)
msg <- "hello"
print(msg)
msg <- "hello" # this message says hello
msg <- "hello" # this message says hello
print(msg)
# this is how i enter input
val <- 1
# this is how i print
print(val)
# this is how i enter character input
msg <- "hello" # this message says hello
val <- 1
# this is how i print
print(val)
# this is how i enter character input
msg <- "hello" # this message says hello
# this is how i enter character input
msg <- "hello" # this message says hello
# print our message
print(msg)
val <- 14   ## nothing printed
val         ## auto-printing occurs
print(val)
print(val)
val
my_seq <- 10:20
my_seq
library(base)
mean(my_seq)
library(base)
my_seq = 10:20
my_mean = mean(my_seq)
my_mean
install.packages('ggplot2')
library(base)
my_seq = 10:20
my_mean = mean(my_seq)
my_mean
max(my_seq)
min(my_seq)
my_seq = seq(10,20)
my_mean = mean(my_seq)
my_mean
my_seq
help("seq")
seq(10,20)
seq()
seq(100,200,10)
seq(from = 100,to = 200, by = 10)
my_seq = seq(from = 100,to = 200, by = 10)
my_seq = seq(by = 10, to = 200, from = 100)
my_seq
my_seq = seq(10,200,100)
my_seq
x <- c(1.25, 2.50)
x
class(x)
x <- c(1.25, 2.50)
x
y <- c(1.7, "a")   ## character
y
class(y)
x <- seq(0,10)
x <- seq(0,10,1)
class(x)
x
as.character(x)
x = c(1,2,NA,NaN,5)
x
is.na(x)
x
mean(x)
help("mean")
?mean
mean(x, na.rm = TRUE)
m <- matrix(nrow = 2, ncol = 3)
m
m
dim(m)
attributes(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
dim(m)
m <- 1:10
m
m = seq(1,10,1)
m
dim(m)
dim(m) <- c(2, 5)
m
x <- 1:3
y <- 10:12
x
y
cbind(x, y)
rbind(x, y)
y <- c(1.7, "a")
y
y <- list(1.7, "a")
y
x <- factor(c("yes", "yes", "no", "yes", "no"))
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
c("yes", "yes", "no", "yes", "no")
x
table(x)
unclass(x)
x <- data.frame(avocados_sold = 1:4, price = c(1.5,1.4,1.5,1.3))
x
nrow(x)
ncol(x)
names(x)
colnames(x)
rownames(x)
names(x) = c("avocados_sold", "Price")
names(x)
data('mtcars')
head(mtcars)
View(mtcars)
head(mtcars)
class(mtcars)
dim(mtcars)
nrow(mtcars)
mtcars
nrow(mtcars)
ncol(mtcars)
colnames(mtcars)
rownames(mtcars)
mtcars["mpg"]
mtcars["mpg", "wt"]
mtcars$wt
mtcars$mpg
c(mtcars$mpg, mtcars$wt)
c(mtcars["mpg"], mtcars["wt"])
nrow(mtcars)
summary(mtcars)
?plot
plot(x = mtcars$mpg, y = mtcars$wt, xlab = "Miles per Gallon",  ylab = "Weight (tons)", main = "Cars Dataset")
# load the data - the mtcars dataset is pre-built
data('mtcars')
# print out the first few rows of the dataset using the head() function
head(mtcars)
# print the class of the mtcars dataset
class(mtcars)
# dimensions of the mtcars dataframe
dim(mtcars)
# number of rows
nrow(mtcars)
# number of columns
ncol(mtcars)
# column names
colnames(mtcars)
# row names
rownames(mtcars)
# selecting the miles per gallon column
mtcars["mpg"]
# selecting the vector of the mpg column
mtcars$mpg
# printing a summary of the dataframe
summary(mtcars)
# plot weight of cars vs miles per gallon
plot(x = mtcars$mpg, y = mtcars$wt, xlab = "Miles per Gallon",  ylab = "Weight (tons)", main = "Cars Dataset")
# load the data - the mtcars dataset is pre-built
data('mtcars')
# print out the first few rows of the dataset using the head() function
head(mtcars)
# print the class of the mtcars dataset
class(mtcars)
# dimensions of the mtcars dataframe
dim(mtcars)
# number of rows
nrow(mtcars)
# number of columns
ncol(mtcars)
# column names
colnames(mtcars)
# row names
rownames(mtcars)
# selecting the miles per gallon column
mtcars["mpg"]
# selecting the vector of the mpg column
mtcars$mpg
# printing a summary of the dataframe
summary(mtcars)
# plot weight of cars vs miles per gallon
plot(x = mtcars$mpg, y = mtcars$wt, xlab = "Miles per Gallon",  ylab = "Weight (tons)", main = "Cars Dataset")
# load the data - the mtcars dataset is pre-built
data('mtcars')
# print out the first few rows of the dataset using the head() function
head(mtcars)
# print the class of the mtcars dataset
class(mtcars)
# dimensions of the mtcars dataframe
dim(mtcars)
# number of rows
nrow(mtcars)
# number of columns
ncol(mtcars)
# column names
colnames(mtcars)
# row names
rownames(mtcars)
# selecting the miles per gallon column
mtcars["mpg"]
# selecting the vector of the mpg column
mtcars$mpg
# printing a summary of the dataframe
summary(mtcars)
# plot weight of cars vs miles per gallon
plot(x = mtcars$mpg, y = mtcars$wt, xlab = "Miles per Gallon",  ylab = "Weight (tons)", main = "Cars Dataset")
x = c(1,2,3,4,5,6)
x
mean(x)
x[3]
for (val in x){
print(x)
}
for (val in x){
print(x[val])
}
for (randomvalasdf in x){
print(x[randomvalasdf])
}
235/7.5
plot(x = 1:10, y=1:10)
deos_data <- read.csv("Documents/Github/geog473-673/datasets/DEOS.csv", header = TRUE, skip=0, stringsAsFactors = FALSE)
names(deos_data)=c("datetime", "air_temperature", "dewpoint", "windspeed", "winddirection", "pressure", "solar_radiation", "wind_gust", "precipitation")
datetime = as.POSIXct(deos_data$datetime, format = '%Y-%m-%d %H:%M')
##subDeos = subset(deos_data, deos_data$datetime >= "2015-01-01 00:00" & deos_data$datetime <= "2015-01-31 23:59")
####print(deos_data$datetime [1:14])
low_ind = which.min(deos_data$datetime < "2015-01-01 00:00:00")
upper_ind = which.max(deos_data$datetime > "2015-01-31 23:55")
windspeed <- deos_data$windspeed/0.44704
windgust <- deos_data$wind_gust/0.44704
plot(deos_data$datetime [0:20], windgust[0:20],type = "p", col = "blue", xlab = paste0(deos_data$datetime[low_ind], "to", deos_data$datetime[upper_ind]), ylab = "mph")
deos_date
summary(deos_data)
plot(deos_data$datetime[0:20], windgust[0:20])
windgust
low_ind
upper_ind
deos_data$datetime[low_ind:upper_ind]
windgust[low_ind]
windgust[low_ind:upper_ind]
plot(deos_data$datetime[0:20], windgust[0:20])
deos_data$datetime = datetime
plot(deos_data$datetime[0:20], windgust[0:20]),type = "p", col = "blue", xlab = paste0(deos_data$datetime[low_ind], "to", deos_data$datetime[upper_ind]), ylab = "mph")
plot(deos_data$datetime[0:20], windgust[0:20],type = "p", col = "blue", xlab = paste0(deos_data$datetime[low_ind], "to", deos_data$datetime[upper_ind]), ylab = "mph")
deos_data <- read.csv("Documents/Github/geog473-673/datasets/DEOS.csv", header = TRUE, skip=0, stringsAsFactors = FALSE)
names(deos_data)=c("datetime", "air_temperature", "dewpoint", "windspeed", "winddirection", "pressure", "solar_radiation", "wind_gust", "precipitation")
datetime = as.POSIXct(deos_data$datetime, format = '%Y-%m-%d %H:%M')
#deos_data$datetime = datetime
##subDeos = subset(deos_data, deos_data$datetime >= "2015-01-01 00:00" & deos_data$datetime <= "2015-01-31 23:59")
####print(deos_data$datetime [1:14])
low_ind = which.min(deos_data$datetime < "2015-01-01 00:00:00")
upper_ind = which.max(deos_data$datetime > "2015-01-31 23:55")
windspeed <- deos_data$windspeed/0.44704
windgust <- deos_data$wind_gust/0.44704
plot(deos_data$datetime[0:20], windgust[0:20],type = "p", col = "blue", xlab = paste0(deos_data$datetime[low_ind], "to", deos_data$datetime[upper_ind]), ylab = "mph")
deos_data$datetime[0:20]
class(deos_data$datetime[1])
deos_data$datetime[1]
class(deos_data$datetime[1])deos_data$datetime[1]
deos_data$datetime[1]
datetime = as.POSIXct(deos_data$datetime, format = '%Y-%m-%d %H:%M')
class(datetime[1])
deos_data$datetime = datetime
class(deos_data$datetime[1])
plot(x = deos_data$datetime[0:20], y = windgust[0:20],type = "p", col = "blue", xlab = paste0(deos_data$datetime[low_ind], "to", deos_data$datetime[upper_ind]), ylab = "mph")
library(raster)
install.packages("Pandoc")
install.packages("bookdown")
install.packages("Pandoc")
?rmarkdown::pandoc_available
pandoc_version()
library(rmarkdown)
rmarkdown::pandoc_version()
install.packages("ncdf4")
install.packages("fields")
install.packages("basicPlotteR")
install.packages("devtools")
devtools::install_github("JosephCrispell/basicPlotteR")
install.packages("rgdal")
library(bookdown)
render_book("Index.Rmd", bookdown::gitbook())
render_book("Index.Rmd", bookdown::gitbook())
getwd()
render_book("Documents/Github/geog473-673/R/Index.Rmd", bookdown::gitbook())
render_book("Documents/Github/geog473-673/R/Index.Rmd", bookdown::gitbook())
setwd("Documents/Github/geog473-673/R/")
render_book("Index.Rmd", bookdown::gitbook())
render_book("Index.Rmd", bookdown::gitbook())
getwd
getwd()
install.packages("bookdown")
install.packages("bookdown")
render_book("Index.Rmd", bookdown::gitbook())
getwd
getwd()
library(bookdown)
getwd()
render_book("Index.Rmd", bookdown::gitbook())
render_book("Index.Rmd", bookdown::gitbook2())
?render_book
render_book("Index.Rmd", "gitbook")
bookdown::gitbook()
?gitbook
install.packages("rmarkdown")
install.packages("rmarkdown")
render_book("Index.Rmd", bookdown::gitbook())
bookdown::render_book("Index.Rmd", output_dir = "/Users/james/Documents/Github/geog473-673/docs/", output_format = "gitbook")
bookdown::render_book("Index.Rmd", output_dir = "/Users/james/Documents/Github/geog473-673/docs/")
render_book("Index.Rmd", bookdown::github_document2())
library(bookdown)
render_book("Index.Rmd", bookdown::github_document2())
R
version
RStudio.Version()
rmarkdown::pandoc_version()
bookdown::version
library(bookdown)
bookdown_site()
?bookdown
remotes::install_github('rstudio/bookdown')
library(bookdown)
render_book("Index.Rmd", bookdown::github_document2())
render_book("Index.Rmd", bookdown::gitbook())
render_book("Index.Rmd", bookdown::gitbook())
render_book("Index.Rmd", bookdown::gitbook())
render_book("Index.Rmd", bookdown::gitbook())
render_book("Index.Rmd", bookdown::gitbook())
render_book("Index.Rmd", "gitbook")
render_book("Index.Rmd", "gitbook")
render_book("Index.Rmd", "gitbook")
render_book("Index.Rmd", "gitbook")
